{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["styled","div","_templateObject","Plateau","_templateObject2","JoliBouton","button","_templateObject3","JoliJoueur","_templateObject4","Case","_templateObject5","debutCases","App","_useState","useState","_useState2","Object","slicedToArray","cells","setCells","_useState3","_useState4","joueur","setJoueur","_useState5","_useState6","enJeu","setEnJeu","_useState7","_useState8","message","setMessage","useEffect","reduce","acc","combination","finiAvecGagnant","indexOf","finiSansGagnant","filter","value","length","auDebut","concat","react_default","a","createElement","className","map","valeur","index","onClick","newCells","toConsumableArray","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kjCAIqBA,IAAOC,IAAVC,KAAlB,IAIMC,EAAUH,IAAOC,IAAVG,KAQPC,EAAaL,IAAOM,OAAVC,KAQVC,EAAaR,IAAOC,IAAVQ,KAKVC,EAAOV,IAAOM,OAAVK,KA0CV,IAAMC,EAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IA4DrCC,EAzDH,WAAM,IAAAC,EACUC,mBAASH,GADnBI,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACFI,EADEJ,EAAA,GAAAK,EAEYN,mBAJV,KAEFO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETE,EAFSD,EAAA,GAEDE,EAFCF,EAAA,GAAAG,EAGUV,oBAAS,GAHnBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGTE,EAHSD,EAAA,GAGFE,EAHEF,EAAA,GAAAG,EAIcd,mBAAS,MAJvBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAITE,EAJSD,EAAA,GAIAE,EAJAF,EAAA,GAyChB,OAnCAG,oBACE,YAzCJ,SAAyBd,GAoBvB,MAnBc,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEQe,OAAO,SAACC,EAAKC,GAC5B,OACED,GAC2B,KAA1BhB,EAAMiB,EAAY,KACjBjB,EAAMiB,EAAY,MAAQjB,EAAMiB,EAAY,KAC5CjB,EAAMiB,EAAY,MAAQjB,EAAMiB,EAAY,MAE/C,GAwBKC,CAAgBlB,GAnB1B,SAAyBA,GACvB,OAA8B,IAAvBA,EAAMmB,QAAQ,IAqBNC,CAAgBpB,IACzBS,GAAS,GACTI,EAAW,uBApBnB,SAAiBb,GACf,OAAsD,IAA/CA,EAAMqB,OAAO,SAAAC,GAAK,MAAc,KAAVA,IAAcC,OAoB5BC,CAAQxB,IACjBK,EAjBY,KAkBZI,GAAS,KAETJ,EAAqB,MAAXD,EAAiB,IAAM,KACjCK,GAAS,KAVTA,GAAS,GACTI,EAAU,GAAAY,OAAIrB,EAAJ,mBAYd,CAACJ,IAoBD0B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACvC,EAAD,KAAauB,GAAoBR,GAEjCsB,EAAAC,EAAAC,cAAC5C,EAAD,KACGgB,EAAM8B,IAAI,SAACC,EAAQC,GAAT,OACTN,EAAAC,EAAAC,cAACrC,EAAD,CAAM0C,QAAS,kBAvBzB,SAAqBD,GACnB,GAAKxB,GAGgB,KAAjBR,EAAMgC,GAAe,CACvB,IAAME,EAAQpC,OAAAqC,EAAA,EAAArC,CAAOE,GACrBkC,EAASF,GAAS5B,EAClBH,EAASiC,IAgBkBE,CAAYJ,KAASD,MAG9CL,EAAAC,EAAAC,cAAC1C,EAAD,CAAY+C,QAflB,WACEhC,EAASR,GACToB,EAAW,QAaP,kBCjHYwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d1d8a9ee.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nconst StyledEmilie = styled.div`\n  color: yellow;\n`;\n\nconst Plateau = styled.div`\n  background-color: yellow;\n  display: grid;\n  grid-gap: 5px;\n  grid-template-columns: repeat(3, 1fr);\n  margin: 30px;\n`;\n\nconst JoliBouton = styled.button`\n  border: solid blueviolet 5px;\n  border-radius: 3px;\n  background-color: yellow;\n  color: blueviolet;\n  font-size: 30px;\n`;\n\nconst JoliJoueur = styled.div`\n  color: yellow;\n  font-size: 30px;\n`;\n\nconst Case = styled.button`\n  background-color: #282c34;\n  color: red;\n  height: 60px;\n  width: 60px;\n  display: grid;\n  align-content: center;\n  border: none;\n  font-size: 40px;\n`;\n\nfunction finiAvecGagnant(cells) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  let fini = lines.reduce((acc, combination) => {\n    return (\n      acc ||\n      (cells[combination[0]] !== \"\" &&\n        cells[combination[0]] === cells[combination[1]] &&\n        cells[combination[1]] === cells[combination[2]])\n    );\n  }, false);\n\n  return fini;\n}\n\nfunction finiSansGagnant(cells) {\n  return cells.indexOf(\"\") === -1;\n}\n\nfunction auDebut(cells) {\n  return cells.filter(value => value === \"\").length === 9;\n}\n\nconst debutCases = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\nconst debutJoueur = \"X\";\n\nconst App = () => {\n  const [cells, setCells] = useState(debutCases);\n  const [joueur, setJoueur] = useState(debutJoueur);\n  const [enJeu, setEnJeu] = useState(false);\n  const [message, setMessage] = useState(null);\n\n  useEffect(\n    () => {\n      if (finiAvecGagnant(cells)) {\n        setEnJeu(false);\n        setMessage(`${joueur} a gagn√©.`);\n      } else if (finiSansGagnant(cells)) {\n        setEnJeu(false);\n        setMessage(\"Fini sans gagnant.\");\n      } else if (auDebut(cells)) {\n        setJoueur(debutJoueur);\n        setEnJeu(true);\n      } else {\n        setJoueur(joueur === \"X\" ? \"O\" : \"X\");\n        setEnJeu(true);\n      }\n    },\n    [cells]\n  );\n\n  function handleClick(index) {\n    if (!enJeu) {\n      return;\n    }\n    if (cells[index] === \"\") {\n      const newCells = [...cells];\n      newCells[index] = joueur;\n      setCells(newCells);\n    }\n  }\n\n  function recommencer() {\n    setCells(debutCases);\n    setMessage(null);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <JoliJoueur>{message ? message : joueur}</JoliJoueur>\n\n        <Plateau>\n          {cells.map((valeur, index) => (\n            <Case onClick={() => handleClick(index)}>{valeur}</Case>\n          ))}\n        </Plateau>\n        <JoliBouton onClick={recommencer}>Recommencer</JoliBouton>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}